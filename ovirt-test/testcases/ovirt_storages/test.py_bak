#!/usr/bin/env python
#
# Copyright 2013 Wind River Systems, Inc.
#
# The right to copy, distribute, modify, or otherwise make use
# of this software may be licensed only pursuant to the terms
# of an applicable Wind River license agreement.
#
# author: Wei Gao
# history: created on Dec 27, 2013
# 

import time
import sys
sys.path.append('../common_lib/')
from ovirt_engine_api import *

class test( host ):
    """ Test for data-center inherit data_center.
    """
    def __init__ ( self, EG_IP, ND_IP ):
        '''Constructor for test.'''
        self.test_dict = {}
        self.test_dict['URL'] = 'https://%s:443/api' % (EG_IP)
        self.test_dict['VERSION'] = params.Version(major='3', minor='2')
        self.test_dict['CA_FILE'] = "/etc/pki/ovirt-engine/ca.pem"
        self.test_dict['USERINFOS'] = []
        self.test_dict['USERINFOS'].append(('admin@internal','admin'))
        self.test_dict['CONNECTION'] = False
        self.test_dict['DATACENTERS'] = []

        self.test_dict['DATACENTERS'].append(('Nfs','nfs'))
        self.test_dict['DATACENTERS'].append(('Iscsi','iscsi'))
        self.test_dict['DATACENTERS'].append(('FibreChannel','fcp'))
        self.test_dict['DATACENTERS'].append(('LocalHost','localfs'))
        self.test_dict['DATACENTERS'].append(('PosixFS','posixfs'))

        self.test_dict['CLUSTERS'] = []
        CPU_TYPE = 'Intel Conroe Family'
        self.test_dict['CLUSTERS'].append(('Conroe',CPU_TYPE))
        CPU_TYPE = 'Intel Nehalem Family'
        self.test_dict['CLUSTERS'].append(('Nehalem',CPU_TYPE))
        CPU_TYPE = 'Intel Penryn Family'
        self.test_dict['CLUSTERS'].append(('Penryn',CPU_TYPE))
        CPU_TYPE = 'Intel Westmere Family'
        self.test_dict['CLUSTERS'].append(('Westmere',CPU_TYPE))
        CPU_TYPE = 'Intel SandyBridge Family'
        self.test_dict['CLUSTERS'].append(('SandyBridge',CPU_TYPE))
        CPU_TYPE = 'Intel Haswell'
        self.test_dict['CLUSTERS'].append(('Haswell',CPU_TYPE))

        self.test_dict['HOSTS'] = []
        self.test_dict['HOSTS'].append(('ovirt_node',ND_IP))

        self.ovirt_dict['DOMAINS'] = []
        self.ovirt_dict['DOMAINS'].append(('data_domain','data','/export/data'))
        self.ovirt_dict['DOMAINS'].append(('iso_domain','iso','/export/iso'))
        self.ovirt_dict['DOMAINS'].append(('export_domain','export','/export/export'))

        global eg_ip
        eg_ip = EG_IP

        self.ovirt_dict = {}
        super(test, self).__init__(self.test_dict)

    def __connect__( self ):
        '''Connect ovirt for test.'''
        try:
            self.print_summary('Create a session to ovirt-engine')
            self.connect_engine()
            self.printInstanceInfo()

            self.print_summary('Check ovirt-engine connection')
            if self.ovirt_dict['CONNECTION'] == False :
                failCount += 1
                print 'Connect ovirt-engine failed \n'
        except Exception as e:
            print 'Failed to connect ovirt-engine:\n%s' % (str(e))
            return False

    def new_domain( self, dc_name ):
        '''Do New domain testing '''
        length = len(self.test_dict['DOMAINS'])
        for i in range(0,length):
            dm_name = self.test_dict['DOMAINS'][i][0]
            dm_type = self.test_dict['DOMAINS'][i][1]
            dm_path = self.test_dict['DOMAINS'][i][2]
            self.print_summary('New domain(%s) in data-center(%s)' % (dm_name,dc_name))
            st_type = self.get_dc_storage_type(dc_name)
            if st_type != None:
                if self.new_storage_domain(st_type,dc_name,dm_name,dm_type,eg_ip,dm_path) != False:
                    print 'New storage domain(%s) in data-center %s ok' % (dm_name, dc_name)
                else:
                    print 'New storage domain(%s) in data-center %s failed' % (dm_name, dc_name)
                    return False

    def del_domain( self, dc_name ):
        '''Do delete domain testing '''
        length = len(self.test_dict['DOMAINS'])
        for i in range(0,length):
            dm_name = self.test_dict['DOMAINS'][i][0]
            dm_type = self.test_dict['DOMAINS'][i][1]
            dm_path = self.test_dict['DOMAINS'][i][2]
            if self.judge_master_domain(dm_name) == True:
                master = i
                master_done = False
                continue 
            self.print_summary('Delete domain(%s) in data-center(%s)' % (dm_name,dc_name))
            if self.delete_storage_domain(dc_name,dm_name) != False:
                print 'Delete storage domain(%s) in data-center %s ok' % (dm_name, dc_name)
            else:
                print 'Delete storage domain(%s) in data-center %s failed' % (dm_name, dc_name)
                return False
            if master_done == True and i == master:
                i = master - 1
                break
            if i + 1 == length:
                i = master
                master_done = True

    def host_test( self, cl_name ):
        '''Do New/Delete host testing '''
        length = len(self.test_dict['HOSTS'])
        for i in range(0,length):
            hs_name = self.test_dict['HOSTS'][i][0]
            hs_addr = self.test_dict['HOSTS'][i][1]
            self.print_summary('New host in cluster %s' % (cl_name))
            if self.new_host(hs_name,hs_addr,cl_name) != False:
                print 'New a host in cluster %s ok' % (cl_name)
            else:
                print 'New a host in cluster %s failed' % (cl_name)
                return False

            time.sleep(2)
            if self.delete_host(hs_name,hs_addr,cl_name) != False:
                print 'Delete a host in cluster %s ok' % (cl_name)
            else:
                print 'Delete a host in cluster %s failed' % (cl_name)
                return False

    def cluster_test( self, dc_name ):
        '''Do New/Delete cluster testing '''
        length = len(self.test_dict['CLUSTERS'])
        for i in range(0,length):
            cl_name = self.test_dict['CLUSTERS'][i][0]
            cl_type = self.test_dict['CLUSTERS'][i][1]
            self.print_summary('New cluster %s in %s' % (cl_name,dc_name))
            if self.new_cluster(cl_name,cl_type,dc_name) != False:
                print 'New a %s type cluster in %s ok' % (cl_type,dc_name)
                if self.host_test(cl_name) != False:
                    print 'host testing in cluster(%s) ok' % (cl_name)
                else:
                    print 'host testing in cluster(%s) failed' % (cl_name)
                    return False
            else:
                print 'New a %s type cluster in %s failed' % (cl_type,dc_name)
                return False

            time.sleep(3)
            self.print_summary('Delete cluster(%s) in %s' % (cl_name,dc_name))
            if self.delete_cluster(cl_name,cl_type,dc_name) != False:
                print 'Delete a %s type cluster in %s ok' % (cl_type,dc_name)
            else:
                print 'Delete a %s type cluster in %s failed' % (cl_type,dc_name)
                return False

    def execute( self ):
        '''Constructor for test.'''
        try:
            self.__connect__()
            length = len(self.test_dict['DATACENTERS'])
            for i in range(0,length):
                dc_name = self.test_dict['DATACENTERS'][0][0]
                dc_type = self.test_dict['DATACENTERS'][0][1]
                self.print_summary('New data center(%s)' % (dc_name))
                if self.new_data_center(dc_name,dc_type) != False:
                    print 'New data center(%s) ok' % (dc_name)
                    if self.cluster_test(dc_name) != False:
                        print 'add cluster in data-center(%s) ok' % (dc_name)
                    else:
                        print 'add cluster in data-center(%s) failed' % (dc_name)
                        return False
                else:
                    print 'New a %s type data center failed' % (dc_type)
                    return False

                time.sleep(3)
                if self.delete_data_center(dc_namee) != False:
                    print 'Remove data center(%s) ok' % (dc_name)
                else:
                    print 'Remove data center(%s) failed' % (dc_name)
                    return False
            if self.disconnect() != None:
                print 'Disconnect ovirt-engine failed' % (name)

        except Exception as e:
            print 'Failed to do hosts test:\n%s' % (str(e))

def main():
    ''' Input engine ip'''
    EG_IP = sys.argv[1]
    ND_IP = sys.argv[2]
    caserun = test(EG_IP, ND_IP)
    caserun.execute()
    caserun.printInstanceInfo()

if __name__ == "__main__":
    main()
